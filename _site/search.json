[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Southeastern Utah’s National Parks",
    "section": "",
    "text": "Text here\n\n\nCode\nlibrary(reticulate)\n\nuse_condaenv(\"base\", required = TRUE)\n\n\n\n\nMore text\n\nIt’s getting hot in here 🥵\n\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load the cleaned datasets\nhistoric_data_1 = pd.read_csv('./data/clean-data/historic_data_cleaned.csv')\nnearterm_data_1 = pd.read_csv('./data/clean-data/nearterm_data_cleaned.csv')\n\n# Combine datasets for some visualizations\ncombined_data_1 = pd.concat([historic_data_1, nearterm_data_1])\n\n# Calculate the center of the map\ncenter_lat_1 = combined_data_1['lat'].mean()\ncenter_long_1 = combined_data_1['long'].mean()\n\n# Function to calculate an appropriate zoom level based on the spread of data points\ndef calculate_zoom_level_1(latitudes_1, longitudes_1):\n    max_lat_1, min_lat_1 = np.max(latitudes_1), np.min(latitudes_1)\n    max_long_1, min_long_1 = np.max(longitudes_1), np.min(longitudes_1)\n    lat_diff_1 = max_lat_1 - min_lat_1\n    long_diff_1 = max_long_1 - min_long_1\n    max_diff_1 = max(lat_diff_1, long_diff_1)\n    \n    if max_diff_1 &lt; 0.01:\n        return 15\n    elif max_diff_1 &lt; 0.1:\n        return 12\n    elif max_diff_1 &lt; 1:\n        return 10\n    elif max_diff_1 &lt; 10:\n        return 8\n    else:\n        return 6\n\n# Calculate zoom level (but we will manually adjust it for more zoom)\nzoom_level_1 = calculate_zoom_level_1(combined_data_1['lat'], combined_data_1['long'])\n\n# Manually adjust zoom level for a more zoomed-in view\nzoom_level_1 = zoom_level_1 * 0.95  # Increase the zoom factor\n\n# Set Mapbox access token\npx.set_mapbox_access_token(\"pk.eyJ1IjoiaXNmYXJiYXNldCIsImEiOiJjbHdiOWVtY2IwbGxsMmtraHZoYnB1YTMwIn0.10XSE1rNVsmXSnFmYYa0Cw\")\n\n# Create the Plotly scatter_mapbox map with enhanced aesthetics and detailed map layers\nmap_fig_1 = px.scatter_mapbox(combined_data_1, lon='long', lat='lat', color='Tmax_Summer',\n                            hover_data={'Tmax_Summer': ':.2f', 'lat': ':.2f', 'long': ':.2f', 'year': True}, size='Tmax_Summer',\n                            labels={'Tmax_Summer': 'max summer temp', 'lat': 'latitude', 'long': 'longitude'},\n                            animation_frame='year', title='Geospatial Distribution of Maximum Summer Temperature Over Time',\n                            color_continuous_scale=px.colors.sequential.Sunsetdark, size_max=15, zoom=zoom_level_1,\n                            center={\"lat\": center_lat_1, \"lon\": center_long_1}\n                            )\n\n# Update the layout for better aesthetics and visibility of state lines\nmap_fig_1.update_layout(\n    mapbox_style=\"carto-positron\",  # Change the map style to show more details\n    mapbox=dict(\n        center=dict(lat=center_lat_1, lon=center_long_1),\n        zoom=zoom_level_1,  # Adjusted zoom level\n    ),\n    title_font=dict(size=18, family='Arial, sans-serif'),  \n    title_x=0.5,\n    coloraxis_colorbar=dict(\n        title=\"Maximum Summer Temperature(°C)\",\n        title_side=\"right\",  # Align the title horizontally with the colorbar\n        title_font=dict(size=14)  # Adjust the font size as needed\n    ),\n    autosize=True,\n    width=800,  # Increase the width of the map\n    height=700   # Increase the height of the map\n)\n\n\n                        \n                                            \nplace description here\n\n\n\nHi my name is Isfar",
    "crumbs": [
      "Southeastern Utah's National Parks"
    ]
  },
  {
    "objectID": "index.html#subtitle",
    "href": "index.html#subtitle",
    "title": "Southeastern Utah’s National Parks",
    "section": "",
    "text": "More text\n\nIt’s getting hot in here 🥵\n\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load the cleaned datasets\nhistoric_data_1 = pd.read_csv('./data/clean-data/historic_data_cleaned.csv')\nnearterm_data_1 = pd.read_csv('./data/clean-data/nearterm_data_cleaned.csv')\n\n# Combine datasets for some visualizations\ncombined_data_1 = pd.concat([historic_data_1, nearterm_data_1])\n\n# Calculate the center of the map\ncenter_lat_1 = combined_data_1['lat'].mean()\ncenter_long_1 = combined_data_1['long'].mean()\n\n# Function to calculate an appropriate zoom level based on the spread of data points\ndef calculate_zoom_level_1(latitudes_1, longitudes_1):\n    max_lat_1, min_lat_1 = np.max(latitudes_1), np.min(latitudes_1)\n    max_long_1, min_long_1 = np.max(longitudes_1), np.min(longitudes_1)\n    lat_diff_1 = max_lat_1 - min_lat_1\n    long_diff_1 = max_long_1 - min_long_1\n    max_diff_1 = max(lat_diff_1, long_diff_1)\n    \n    if max_diff_1 &lt; 0.01:\n        return 15\n    elif max_diff_1 &lt; 0.1:\n        return 12\n    elif max_diff_1 &lt; 1:\n        return 10\n    elif max_diff_1 &lt; 10:\n        return 8\n    else:\n        return 6\n\n# Calculate zoom level (but we will manually adjust it for more zoom)\nzoom_level_1 = calculate_zoom_level_1(combined_data_1['lat'], combined_data_1['long'])\n\n# Manually adjust zoom level for a more zoomed-in view\nzoom_level_1 = zoom_level_1 * 0.95  # Increase the zoom factor\n\n# Set Mapbox access token\npx.set_mapbox_access_token(\"pk.eyJ1IjoiaXNmYXJiYXNldCIsImEiOiJjbHdiOWVtY2IwbGxsMmtraHZoYnB1YTMwIn0.10XSE1rNVsmXSnFmYYa0Cw\")\n\n# Create the Plotly scatter_mapbox map with enhanced aesthetics and detailed map layers\nmap_fig_1 = px.scatter_mapbox(combined_data_1, lon='long', lat='lat', color='Tmax_Summer',\n                            hover_data={'Tmax_Summer': ':.2f', 'lat': ':.2f', 'long': ':.2f', 'year': True}, size='Tmax_Summer',\n                            labels={'Tmax_Summer': 'max summer temp', 'lat': 'latitude', 'long': 'longitude'},\n                            animation_frame='year', title='Geospatial Distribution of Maximum Summer Temperature Over Time',\n                            color_continuous_scale=px.colors.sequential.Sunsetdark, size_max=15, zoom=zoom_level_1,\n                            center={\"lat\": center_lat_1, \"lon\": center_long_1}\n                            )\n\n# Update the layout for better aesthetics and visibility of state lines\nmap_fig_1.update_layout(\n    mapbox_style=\"carto-positron\",  # Change the map style to show more details\n    mapbox=dict(\n        center=dict(lat=center_lat_1, lon=center_long_1),\n        zoom=zoom_level_1,  # Adjusted zoom level\n    ),\n    title_font=dict(size=18, family='Arial, sans-serif'),  \n    title_x=0.5,\n    coloraxis_colorbar=dict(\n        title=\"Maximum Summer Temperature(°C)\",\n        title_side=\"right\",  # Align the title horizontally with the colorbar\n        title_font=dict(size=14)  # Adjust the font size as needed\n    ),\n    autosize=True,\n    width=800,  # Increase the width of the map\n    height=700   # Increase the height of the map\n)\n\n\n                        \n                                            \nplace description here\n\n\n\nHi my name is Isfar",
    "crumbs": [
      "Southeastern Utah's National Parks"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "trend.html",
    "href": "trend.html",
    "title": "Trend Analysis",
    "section": "",
    "text": "Text here\n\n\nCode\nlibrary(reticulate)\n\nuse_condaenv(\"base\", required = TRUE)\n\n\n\n\nMore text\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the cleaned datasets\nhistoric_data = pd.read_csv('./data/clean-data/historic_data_cleaned.csv')\nnearterm_data = pd.read_csv('./data/clean-data/nearterm_data_cleaned.csv')\n\n# Combine datasets for some visualizations\ncombined_data = pd.concat([historic_data, nearterm_data])\n\n# Prepare data for linear regression\ncombined_precip = combined_data.dropna(subset=['PPT_Annual'])\nX_precip = combined_precip[['year']].values\ny_precip = combined_precip['PPT_Annual'].values\n\n# Prepare data for linear regression\ncombined_temp = combined_data.dropna(subset=['T_Annual'])\nX_temp = combined_temp[['year']].values\ny_temp = combined_temp['T_Annual'].values\n\n# Aggregate data by year for temperature and precipitation\naggregated_temp = combined_temp.groupby('year').mean().reset_index()\naggregated_precip = combined_precip.groupby('year').mean().reset_index()\n\n# Linear regression analysis for aggregated temperature data\nX_temp_agg = aggregated_temp[['year']].values\ny_temp_agg = aggregated_temp['T_Annual'].values\nmodel_temp_agg = LinearRegression().fit(X_temp_agg, y_temp_agg)\ntrend_temp_agg = model_temp_agg.predict(X_temp_agg)\nslope_temp_agg = model_temp_agg.coef_[0]\nintercept_temp_agg = model_temp_agg.intercept_\n\n# Create the figure for temperature trend\nfig_temp = go.Figure(data=[\n    go.Scatter(\n        x=aggregated_temp['year'], \n        y=aggregated_temp['T_Annual'],\n        mode='markers+lines',\n        name='Observed',\n        hovertemplate='Year: %{x}&lt;br&gt;Avg Temp: %{y:.2f}°C'\n    ),\n    go.Scatter(\n        x=aggregated_temp['year'], \n        y=trend_temp_agg,\n        mode='lines',\n        name='Trend',\n        line=dict(color='red'),\n        hovertemplate='Year: %{x}&lt;br&gt;Trend: %{y:.2f}°C'\n    )\n])\n\n# Update layout for temperature trend\nfig_temp.update_layout(\n    title='Trend Analysis: Average Annual Temperature in Utah (1980-2024)',\n    xaxis_title='Year',\n    yaxis_title='Average Temperature (°C)',\n    legend_title='',\n    template='plotly_white'\n)\n\n\n                        \n                                            \nplace description here\n\n\nCode\n# Linear regression analysis for aggregated precipitation data with the full range of years\nall_years = pd.DataFrame({'year': np.arange(aggregated_precip['year'].min(), aggregated_precip['year'].max() + 1)})\naggregated_precip_full = pd.merge(all_years, aggregated_precip, on='year', how='left')\n\nX_precip_agg_full = aggregated_precip_full[['year']].values\ny_precip_agg_full = aggregated_precip_full['PPT_Annual'].values\nmodel_precip_agg_full = LinearRegression().fit(X_precip_agg_full[~np.isnan(y_precip_agg_full)], \n                                               y_precip_agg_full[~np.isnan(y_precip_agg_full)])\ntrend_precip_agg_full = model_precip_agg_full.predict(X_precip_agg_full)\n\n# Create the figure for precipitation trend with line plot\nfig_precip = go.Figure(data=[\n    go.Scatter(\n        x=aggregated_precip_full['year'], \n        y=aggregated_precip_full['PPT_Annual'],\n        mode='markers+lines',\n        name='Observed',\n        line=dict(color='skyblue'),\n        hovertemplate='Year: %{x}&lt;br&gt;Total Precip: %{y:.2f} inches'\n    ),\n    go.Scatter(\n        x=aggregated_precip_full['year'], \n        y=trend_precip_agg_full,\n        mode='lines',\n        name='Trend',\n        line=dict(color='red'),\n        hovertemplate='Year: %{x}&lt;br&gt;Trend: %{y:.2f} inches'\n    )\n])\n\n# Update layout for precipitation trend\nfig_precip.update_layout(\n    title='Trend Analysis: Total Annual Precipitation in Utah (1980-2024)',\n    xaxis_title='Year',\n    yaxis_title='Total Precipitation (inches)',\n    legend_title='',\n    template='plotly_white'\n)\n\n\n                        \n                                            \nplace description here\n\n\nHi my name is Isfar",
    "crumbs": [
      "What's trending 📊",
      "Trend Analysis"
    ]
  },
  {
    "objectID": "trend.html#subtitle",
    "href": "trend.html#subtitle",
    "title": "Trend Analysis",
    "section": "",
    "text": "More text\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the cleaned datasets\nhistoric_data = pd.read_csv('./data/clean-data/historic_data_cleaned.csv')\nnearterm_data = pd.read_csv('./data/clean-data/nearterm_data_cleaned.csv')\n\n# Combine datasets for some visualizations\ncombined_data = pd.concat([historic_data, nearterm_data])\n\n# Prepare data for linear regression\ncombined_precip = combined_data.dropna(subset=['PPT_Annual'])\nX_precip = combined_precip[['year']].values\ny_precip = combined_precip['PPT_Annual'].values\n\n# Prepare data for linear regression\ncombined_temp = combined_data.dropna(subset=['T_Annual'])\nX_temp = combined_temp[['year']].values\ny_temp = combined_temp['T_Annual'].values\n\n# Aggregate data by year for temperature and precipitation\naggregated_temp = combined_temp.groupby('year').mean().reset_index()\naggregated_precip = combined_precip.groupby('year').mean().reset_index()\n\n# Linear regression analysis for aggregated temperature data\nX_temp_agg = aggregated_temp[['year']].values\ny_temp_agg = aggregated_temp['T_Annual'].values\nmodel_temp_agg = LinearRegression().fit(X_temp_agg, y_temp_agg)\ntrend_temp_agg = model_temp_agg.predict(X_temp_agg)\nslope_temp_agg = model_temp_agg.coef_[0]\nintercept_temp_agg = model_temp_agg.intercept_\n\n# Create the figure for temperature trend\nfig_temp = go.Figure(data=[\n    go.Scatter(\n        x=aggregated_temp['year'], \n        y=aggregated_temp['T_Annual'],\n        mode='markers+lines',\n        name='Observed',\n        hovertemplate='Year: %{x}&lt;br&gt;Avg Temp: %{y:.2f}°C'\n    ),\n    go.Scatter(\n        x=aggregated_temp['year'], \n        y=trend_temp_agg,\n        mode='lines',\n        name='Trend',\n        line=dict(color='red'),\n        hovertemplate='Year: %{x}&lt;br&gt;Trend: %{y:.2f}°C'\n    )\n])\n\n# Update layout for temperature trend\nfig_temp.update_layout(\n    title='Trend Analysis: Average Annual Temperature in Utah (1980-2024)',\n    xaxis_title='Year',\n    yaxis_title='Average Temperature (°C)',\n    legend_title='',\n    template='plotly_white'\n)\n\n\n                        \n                                            \nplace description here\n\n\nCode\n# Linear regression analysis for aggregated precipitation data with the full range of years\nall_years = pd.DataFrame({'year': np.arange(aggregated_precip['year'].min(), aggregated_precip['year'].max() + 1)})\naggregated_precip_full = pd.merge(all_years, aggregated_precip, on='year', how='left')\n\nX_precip_agg_full = aggregated_precip_full[['year']].values\ny_precip_agg_full = aggregated_precip_full['PPT_Annual'].values\nmodel_precip_agg_full = LinearRegression().fit(X_precip_agg_full[~np.isnan(y_precip_agg_full)], \n                                               y_precip_agg_full[~np.isnan(y_precip_agg_full)])\ntrend_precip_agg_full = model_precip_agg_full.predict(X_precip_agg_full)\n\n# Create the figure for precipitation trend with line plot\nfig_precip = go.Figure(data=[\n    go.Scatter(\n        x=aggregated_precip_full['year'], \n        y=aggregated_precip_full['PPT_Annual'],\n        mode='markers+lines',\n        name='Observed',\n        line=dict(color='skyblue'),\n        hovertemplate='Year: %{x}&lt;br&gt;Total Precip: %{y:.2f} inches'\n    ),\n    go.Scatter(\n        x=aggregated_precip_full['year'], \n        y=trend_precip_agg_full,\n        mode='lines',\n        name='Trend',\n        line=dict(color='red'),\n        hovertemplate='Year: %{x}&lt;br&gt;Trend: %{y:.2f} inches'\n    )\n])\n\n# Update layout for precipitation trend\nfig_precip.update_layout(\n    title='Trend Analysis: Total Annual Precipitation in Utah (1980-2024)',\n    xaxis_title='Year',\n    yaxis_title='Total Precipitation (inches)',\n    legend_title='',\n    template='plotly_white'\n)\n\n\n                        \n                                            \nplace description here\n\n\nHi my name is Isfar",
    "crumbs": [
      "What's trending 📊",
      "Trend Analysis"
    ]
  },
  {
    "objectID": "treecanopy.html",
    "href": "treecanopy.html",
    "title": "Treecanopy Analysis",
    "section": "",
    "text": "Text here\n\n\nCode\nlibrary(reticulate)\n\nuse_condaenv(\"base\", required = TRUE)\n\n\n\n\nMore text\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load the cleaned datasets\nhistoric_data = pd.read_csv('./data/clean-data/historic_data_cleaned.csv')\nnearterm_data = pd.read_csv('./data/clean-data/nearterm_data_cleaned.csv')\n\n# Combine datasets for some visualizations\ncombined_data = pd.concat([historic_data, nearterm_data])\n\n# Calculate the center of the map\ncenter_lat = combined_data['lat'].mean()\ncenter_long = combined_data['long'].mean()\n\n# Function to calculate an appropriate zoom level based on the spread of data points\ndef calculate_zoom_level(latitudes, longitudes):\n    max_lat, min_lat = np.max(latitudes), np.min(latitudes)\n    max_long, min_long = np.max(longitudes), np.min(longitudes)\n    lat_diff = max_lat - min_lat\n    long_diff = max_long - min_long\n    max_diff = max(lat_diff, long_diff)\n    \n    if max_diff &lt; 0.01:\n        return 15\n    elif max_diff &lt; 0.1:\n        return 12\n    elif max_diff &lt; 1:\n        return 10\n    elif max_diff &lt; 10:\n        return 8\n    else:\n        return 6\n\n# Calculate zoom level (but we will manually adjust it for more zoom)\nzoom_level = calculate_zoom_level(combined_data['lat'], combined_data['long'])\n\n# Manually adjust zoom level for a more zoomed-in view\nzoom_level = zoom_level * 0.95  # Increase the zoom factor\n\n# Create the Plotly scatter_mapbox map with enhanced aesthetics and detailed map layers\nmap_fig = px.scatter_mapbox(combined_data, lon='long', lat='lat', color='treecanopy',\n                            hover_data={'treecanopy': ':.2f', 'lat': ':.2f', 'long': ':.2f', 'year': True}, size='treecanopy',\n                            labels={'treecanopy': 'tree canopy', 'lat': 'latitude', 'long': 'longitude'},\n                            animation_frame='year', title='Geospatial Distribution of Tree Canopy Over Time',\n                            color_continuous_scale=px.colors.sequential.Sunsetdark, size_max=15, zoom=zoom_level,\n                            center={\"lat\": center_lat, \"lon\": center_long})\n\n# Update the layout for better aesthetics and visibility of state lines\nmap_fig.update_layout(\n    mapbox_style=\"carto-positron\",  # Change the map style to show more details\n    mapbox=dict(\n        center=dict(lat=center_lat, lon=center_long),\n        zoom=zoom_level,  # Adjusted zoom level\n    ),\n    title_font=dict(size=18, family='Arial, sans-serif'),  \n    title_x=0.5,\n    coloraxis_colorbar=dict(\n        title=\"Tree Canopy (%)\",\n        title_side=\"right\",  # Align the title horizontally with the colorbar\n        title_font=dict(size=14)  # Adjust the font size as needed\n    ),\n    autosize=True,\n    width=800,  # Increase the width of the map\n    height=700   # Increase the height of the map\n)\n\n\n                        \n                                            \nplace description here\n\n\nHi my name is Isfar",
    "crumbs": [
      "Looking into treecanopy 🌳",
      "Treecanopy Analysis"
    ]
  },
  {
    "objectID": "treecanopy.html#subtitle",
    "href": "treecanopy.html#subtitle",
    "title": "Treecanopy Analysis",
    "section": "",
    "text": "More text\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load the cleaned datasets\nhistoric_data = pd.read_csv('./data/clean-data/historic_data_cleaned.csv')\nnearterm_data = pd.read_csv('./data/clean-data/nearterm_data_cleaned.csv')\n\n# Combine datasets for some visualizations\ncombined_data = pd.concat([historic_data, nearterm_data])\n\n# Calculate the center of the map\ncenter_lat = combined_data['lat'].mean()\ncenter_long = combined_data['long'].mean()\n\n# Function to calculate an appropriate zoom level based on the spread of data points\ndef calculate_zoom_level(latitudes, longitudes):\n    max_lat, min_lat = np.max(latitudes), np.min(latitudes)\n    max_long, min_long = np.max(longitudes), np.min(longitudes)\n    lat_diff = max_lat - min_lat\n    long_diff = max_long - min_long\n    max_diff = max(lat_diff, long_diff)\n    \n    if max_diff &lt; 0.01:\n        return 15\n    elif max_diff &lt; 0.1:\n        return 12\n    elif max_diff &lt; 1:\n        return 10\n    elif max_diff &lt; 10:\n        return 8\n    else:\n        return 6\n\n# Calculate zoom level (but we will manually adjust it for more zoom)\nzoom_level = calculate_zoom_level(combined_data['lat'], combined_data['long'])\n\n# Manually adjust zoom level for a more zoomed-in view\nzoom_level = zoom_level * 0.95  # Increase the zoom factor\n\n# Create the Plotly scatter_mapbox map with enhanced aesthetics and detailed map layers\nmap_fig = px.scatter_mapbox(combined_data, lon='long', lat='lat', color='treecanopy',\n                            hover_data={'treecanopy': ':.2f', 'lat': ':.2f', 'long': ':.2f', 'year': True}, size='treecanopy',\n                            labels={'treecanopy': 'tree canopy', 'lat': 'latitude', 'long': 'longitude'},\n                            animation_frame='year', title='Geospatial Distribution of Tree Canopy Over Time',\n                            color_continuous_scale=px.colors.sequential.Sunsetdark, size_max=15, zoom=zoom_level,\n                            center={\"lat\": center_lat, \"lon\": center_long})\n\n# Update the layout for better aesthetics and visibility of state lines\nmap_fig.update_layout(\n    mapbox_style=\"carto-positron\",  # Change the map style to show more details\n    mapbox=dict(\n        center=dict(lat=center_lat, lon=center_long),\n        zoom=zoom_level,  # Adjusted zoom level\n    ),\n    title_font=dict(size=18, family='Arial, sans-serif'),  \n    title_x=0.5,\n    coloraxis_colorbar=dict(\n        title=\"Tree Canopy (%)\",\n        title_side=\"right\",  # Align the title horizontally with the colorbar\n        title_font=dict(size=14)  # Adjust the font size as needed\n    ),\n    autosize=True,\n    width=800,  # Increase the width of the map\n    height=700   # Increase the height of the map\n)\n\n\n                        \n                                            \nplace description here\n\n\nHi my name is Isfar",
    "crumbs": [
      "Looking into treecanopy 🌳",
      "Treecanopy Analysis"
    ]
  },
  {
    "objectID": "pages/treecanopy/treecanopy.html",
    "href": "pages/treecanopy/treecanopy.html",
    "title": "Treecanopy Analysis",
    "section": "",
    "text": "Text here\n\n\nCode\nlibrary(reticulate)\n\nuse_condaenv(\"base\", required = TRUE)\n\n\n\n\nMore text\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load the cleaned datasets\nhistoric_data = pd.read_csv('../../data/clean-data/historic_data_cleaned.csv')\nnearterm_data = pd.read_csv('../../data/clean-data/nearterm_data_cleaned.csv')\n\n# Combine datasets for some visualizations\ncombined_data = pd.concat([historic_data, nearterm_data])\n\n# Calculate the center of the map\ncenter_lat = combined_data['lat'].mean()\ncenter_long = combined_data['long'].mean()\n\n# Function to calculate an appropriate zoom level based on the spread of data points\ndef calculate_zoom_level(latitudes, longitudes):\n    max_lat, min_lat = np.max(latitudes), np.min(latitudes)\n    max_long, min_long = np.max(longitudes), np.min(longitudes)\n    lat_diff = max_lat - min_lat\n    long_diff = max_long - min_long\n    max_diff = max(lat_diff, long_diff)\n    \n    if max_diff &lt; 0.01:\n        return 15\n    elif max_diff &lt; 0.1:\n        return 12\n    elif max_diff &lt; 1:\n        return 10\n    elif max_diff &lt; 10:\n        return 8\n    else:\n        return 6\n\n# Calculate zoom level (but we will manually adjust it for more zoom)\nzoom_level = calculate_zoom_level(combined_data['lat'], combined_data['long'])\n\n# Manually adjust zoom level for a more zoomed-in view\nzoom_level = zoom_level * 0.95  # Increase the zoom factor\n\n# Create the Plotly scatter_mapbox map with enhanced aesthetics and detailed map layers\nmap_fig = px.scatter_mapbox(combined_data, lon='long', lat='lat', color='treecanopy',\n                            hover_data={'treecanopy': ':.2f', 'lat': ':.2f', 'long': ':.2f', 'year': True}, size='treecanopy',\n                            labels={'treecanopy': 'tree canopy', 'lat': 'latitude', 'long': 'longitude'},\n                            animation_frame='year', title='Geospatial Distribution of Tree Canopy Over Time',\n                            color_continuous_scale=px.colors.sequential.Sunsetdark, size_max=15, zoom=zoom_level,\n                            center={\"lat\": center_lat, \"lon\": center_long})\n\n# Update the layout for better aesthetics and visibility of state lines\nmap_fig.update_layout(\n    mapbox_style=\"carto-positron\",  # Change the map style to show more details\n    mapbox=dict(\n        center=dict(lat=center_lat, lon=center_long),\n        zoom=zoom_level,  # Adjusted zoom level\n    ),\n    title_font=dict(size=18, family='Arial, sans-serif'),  \n    title_x=0.5,\n    coloraxis_colorbar=dict(\n        title=\"Tree Canopy (%)\",\n        title_side=\"right\",  # Align the title horizontally with the colorbar\n        title_font=dict(size=14)  # Adjust the font size as needed\n    ),\n    autosize=True,\n    width=800,  # Increase the width of the map\n    height=700   # Increase the height of the map\n)\n\n\n                        \n                                            \nplace description here\n\n\nHi my name is Isfar",
    "crumbs": [
      "2️⃣",
      "Treecanopy Analysis"
    ]
  },
  {
    "objectID": "pages/treecanopy/treecanopy.html#subtitle",
    "href": "pages/treecanopy/treecanopy.html#subtitle",
    "title": "Treecanopy Analysis",
    "section": "",
    "text": "More text\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load the cleaned datasets\nhistoric_data = pd.read_csv('../../data/clean-data/historic_data_cleaned.csv')\nnearterm_data = pd.read_csv('../../data/clean-data/nearterm_data_cleaned.csv')\n\n# Combine datasets for some visualizations\ncombined_data = pd.concat([historic_data, nearterm_data])\n\n# Calculate the center of the map\ncenter_lat = combined_data['lat'].mean()\ncenter_long = combined_data['long'].mean()\n\n# Function to calculate an appropriate zoom level based on the spread of data points\ndef calculate_zoom_level(latitudes, longitudes):\n    max_lat, min_lat = np.max(latitudes), np.min(latitudes)\n    max_long, min_long = np.max(longitudes), np.min(longitudes)\n    lat_diff = max_lat - min_lat\n    long_diff = max_long - min_long\n    max_diff = max(lat_diff, long_diff)\n    \n    if max_diff &lt; 0.01:\n        return 15\n    elif max_diff &lt; 0.1:\n        return 12\n    elif max_diff &lt; 1:\n        return 10\n    elif max_diff &lt; 10:\n        return 8\n    else:\n        return 6\n\n# Calculate zoom level (but we will manually adjust it for more zoom)\nzoom_level = calculate_zoom_level(combined_data['lat'], combined_data['long'])\n\n# Manually adjust zoom level for a more zoomed-in view\nzoom_level = zoom_level * 0.95  # Increase the zoom factor\n\n# Create the Plotly scatter_mapbox map with enhanced aesthetics and detailed map layers\nmap_fig = px.scatter_mapbox(combined_data, lon='long', lat='lat', color='treecanopy',\n                            hover_data={'treecanopy': ':.2f', 'lat': ':.2f', 'long': ':.2f', 'year': True}, size='treecanopy',\n                            labels={'treecanopy': 'tree canopy', 'lat': 'latitude', 'long': 'longitude'},\n                            animation_frame='year', title='Geospatial Distribution of Tree Canopy Over Time',\n                            color_continuous_scale=px.colors.sequential.Sunsetdark, size_max=15, zoom=zoom_level,\n                            center={\"lat\": center_lat, \"lon\": center_long})\n\n# Update the layout for better aesthetics and visibility of state lines\nmap_fig.update_layout(\n    mapbox_style=\"carto-positron\",  # Change the map style to show more details\n    mapbox=dict(\n        center=dict(lat=center_lat, lon=center_long),\n        zoom=zoom_level,  # Adjusted zoom level\n    ),\n    title_font=dict(size=18, family='Arial, sans-serif'),  \n    title_x=0.5,\n    coloraxis_colorbar=dict(\n        title=\"Tree Canopy (%)\",\n        title_side=\"right\",  # Align the title horizontally with the colorbar\n        title_font=dict(size=14)  # Adjust the font size as needed\n    ),\n    autosize=True,\n    width=800,  # Increase the width of the map\n    height=700   # Increase the height of the map\n)\n\n\n                        \n                                            \nplace description here\n\n\nHi my name is Isfar",
    "crumbs": [
      "2️⃣",
      "Treecanopy Analysis"
    ]
  },
  {
    "objectID": "pages/trend/trend.html",
    "href": "pages/trend/trend.html",
    "title": "Trend Analysis",
    "section": "",
    "text": "Text here\n\n\nCode\nlibrary(reticulate)\n\nuse_condaenv(\"base\", required = TRUE)\n\n\n\n\nMore text\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the cleaned datasets\nhistoric_data = pd.read_csv('../../data/clean-data/historic_data_cleaned.csv')\nnearterm_data = pd.read_csv('../../data/clean-data/nearterm_data_cleaned.csv')\n\n# Combine datasets for some visualizations\ncombined_data = pd.concat([historic_data, nearterm_data])\n\n# Prepare data for linear regression\ncombined_precip = combined_data.dropna(subset=['PPT_Annual'])\nX_precip = combined_precip[['year']].values\ny_precip = combined_precip['PPT_Annual'].values\n\n# Prepare data for linear regression\ncombined_temp = combined_data.dropna(subset=['T_Annual'])\nX_temp = combined_temp[['year']].values\ny_temp = combined_temp['T_Annual'].values\n\n# Aggregate data by year for temperature and precipitation\naggregated_temp = combined_temp.groupby('year').mean().reset_index()\naggregated_precip = combined_precip.groupby('year').mean().reset_index()\n\n# Linear regression analysis for aggregated temperature data\nX_temp_agg = aggregated_temp[['year']].values\ny_temp_agg = aggregated_temp['T_Annual'].values\nmodel_temp_agg = LinearRegression().fit(X_temp_agg, y_temp_agg)\ntrend_temp_agg = model_temp_agg.predict(X_temp_agg)\nslope_temp_agg = model_temp_agg.coef_[0]\nintercept_temp_agg = model_temp_agg.intercept_\n\n# Create the figure for temperature trend\nfig_temp = go.Figure(data=[\n    go.Scatter(\n        x=aggregated_temp['year'], \n        y=aggregated_temp['T_Annual'],\n        mode='markers+lines',\n        name='Observed',\n        hovertemplate='Year: %{x}&lt;br&gt;Avg Temp: %{y:.2f}°C'\n    ),\n    go.Scatter(\n        x=aggregated_temp['year'], \n        y=trend_temp_agg,\n        mode='lines',\n        name='Trend',\n        line=dict(color='red'),\n        hovertemplate='Year: %{x}&lt;br&gt;Trend: %{y:.2f}°C'\n    )\n])\n\n# Update layout for temperature trend\nfig_temp.update_layout(\n    title='Trend Analysis: Average Annual Temperature in Utah (1980-2024)',\n    xaxis_title='Year',\n    yaxis_title='Average Temperature (°C)',\n    legend_title='',\n    template='plotly_white'\n)\n\n\n                        \n                                            \nplace description here\n\n\nCode\n# Linear regression analysis for aggregated precipitation data with the full range of years\nall_years = pd.DataFrame({'year': np.arange(aggregated_precip['year'].min(), aggregated_precip['year'].max() + 1)})\naggregated_precip_full = pd.merge(all_years, aggregated_precip, on='year', how='left')\n\nX_precip_agg_full = aggregated_precip_full[['year']].values\ny_precip_agg_full = aggregated_precip_full['PPT_Annual'].values\nmodel_precip_agg_full = LinearRegression().fit(X_precip_agg_full[~np.isnan(y_precip_agg_full)], \n                                               y_precip_agg_full[~np.isnan(y_precip_agg_full)])\ntrend_precip_agg_full = model_precip_agg_full.predict(X_precip_agg_full)\n\n# Create the figure for precipitation trend with line plot\nfig_precip = go.Figure(data=[\n    go.Scatter(\n        x=aggregated_precip_full['year'], \n        y=aggregated_precip_full['PPT_Annual'],\n        mode='markers+lines',\n        name='Observed',\n        line=dict(color='skyblue'),\n        hovertemplate='Year: %{x}&lt;br&gt;Total Precip: %{y:.2f} inches'\n    ),\n    go.Scatter(\n        x=aggregated_precip_full['year'], \n        y=trend_precip_agg_full,\n        mode='lines',\n        name='Trend',\n        line=dict(color='red'),\n        hovertemplate='Year: %{x}&lt;br&gt;Trend: %{y:.2f} inches'\n    )\n])\n\n# Update layout for precipitation trend\nfig_precip.update_layout(\n    title='Trend Analysis: Total Annual Precipitation in Utah (1980-2024)',\n    xaxis_title='Year',\n    yaxis_title='Total Precipitation (inches)',\n    legend_title='',\n    template='plotly_white'\n)\n\n\n                        \n                                            \nplace description here\n\n\nHi my name is Isfar",
    "crumbs": [
      "3️⃣",
      "Trend Analysis"
    ]
  },
  {
    "objectID": "pages/trend/trend.html#subtitle",
    "href": "pages/trend/trend.html#subtitle",
    "title": "Trend Analysis",
    "section": "",
    "text": "More text\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the cleaned datasets\nhistoric_data = pd.read_csv('../../data/clean-data/historic_data_cleaned.csv')\nnearterm_data = pd.read_csv('../../data/clean-data/nearterm_data_cleaned.csv')\n\n# Combine datasets for some visualizations\ncombined_data = pd.concat([historic_data, nearterm_data])\n\n# Prepare data for linear regression\ncombined_precip = combined_data.dropna(subset=['PPT_Annual'])\nX_precip = combined_precip[['year']].values\ny_precip = combined_precip['PPT_Annual'].values\n\n# Prepare data for linear regression\ncombined_temp = combined_data.dropna(subset=['T_Annual'])\nX_temp = combined_temp[['year']].values\ny_temp = combined_temp['T_Annual'].values\n\n# Aggregate data by year for temperature and precipitation\naggregated_temp = combined_temp.groupby('year').mean().reset_index()\naggregated_precip = combined_precip.groupby('year').mean().reset_index()\n\n# Linear regression analysis for aggregated temperature data\nX_temp_agg = aggregated_temp[['year']].values\ny_temp_agg = aggregated_temp['T_Annual'].values\nmodel_temp_agg = LinearRegression().fit(X_temp_agg, y_temp_agg)\ntrend_temp_agg = model_temp_agg.predict(X_temp_agg)\nslope_temp_agg = model_temp_agg.coef_[0]\nintercept_temp_agg = model_temp_agg.intercept_\n\n# Create the figure for temperature trend\nfig_temp = go.Figure(data=[\n    go.Scatter(\n        x=aggregated_temp['year'], \n        y=aggregated_temp['T_Annual'],\n        mode='markers+lines',\n        name='Observed',\n        hovertemplate='Year: %{x}&lt;br&gt;Avg Temp: %{y:.2f}°C'\n    ),\n    go.Scatter(\n        x=aggregated_temp['year'], \n        y=trend_temp_agg,\n        mode='lines',\n        name='Trend',\n        line=dict(color='red'),\n        hovertemplate='Year: %{x}&lt;br&gt;Trend: %{y:.2f}°C'\n    )\n])\n\n# Update layout for temperature trend\nfig_temp.update_layout(\n    title='Trend Analysis: Average Annual Temperature in Utah (1980-2024)',\n    xaxis_title='Year',\n    yaxis_title='Average Temperature (°C)',\n    legend_title='',\n    template='plotly_white'\n)\n\n\n                        \n                                            \nplace description here\n\n\nCode\n# Linear regression analysis for aggregated precipitation data with the full range of years\nall_years = pd.DataFrame({'year': np.arange(aggregated_precip['year'].min(), aggregated_precip['year'].max() + 1)})\naggregated_precip_full = pd.merge(all_years, aggregated_precip, on='year', how='left')\n\nX_precip_agg_full = aggregated_precip_full[['year']].values\ny_precip_agg_full = aggregated_precip_full['PPT_Annual'].values\nmodel_precip_agg_full = LinearRegression().fit(X_precip_agg_full[~np.isnan(y_precip_agg_full)], \n                                               y_precip_agg_full[~np.isnan(y_precip_agg_full)])\ntrend_precip_agg_full = model_precip_agg_full.predict(X_precip_agg_full)\n\n# Create the figure for precipitation trend with line plot\nfig_precip = go.Figure(data=[\n    go.Scatter(\n        x=aggregated_precip_full['year'], \n        y=aggregated_precip_full['PPT_Annual'],\n        mode='markers+lines',\n        name='Observed',\n        line=dict(color='skyblue'),\n        hovertemplate='Year: %{x}&lt;br&gt;Total Precip: %{y:.2f} inches'\n    ),\n    go.Scatter(\n        x=aggregated_precip_full['year'], \n        y=trend_precip_agg_full,\n        mode='lines',\n        name='Trend',\n        line=dict(color='red'),\n        hovertemplate='Year: %{x}&lt;br&gt;Trend: %{y:.2f} inches'\n    )\n])\n\n# Update layout for precipitation trend\nfig_precip.update_layout(\n    title='Trend Analysis: Total Annual Precipitation in Utah (1980-2024)',\n    xaxis_title='Year',\n    yaxis_title='Total Precipitation (inches)',\n    legend_title='',\n    template='plotly_white'\n)\n\n\n                        \n                                            \nplace description here\n\n\nHi my name is Isfar",
    "crumbs": [
      "3️⃣",
      "Trend Analysis"
    ]
  }
]